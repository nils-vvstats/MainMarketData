// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(MarketDataDbContext))]
    [Migration("20211114073800_UpdateHeroConfigurations")]
    partial class UpdateHeroConfigurations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Auctions.YoHeroLiveAuctions.YoHeroLiveAuction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<int?>("HeroID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroID");

                    b.ToTable("YoHeroLiveAuctions");
                });

            modelBuilder.Entity("Core.NFTs.YoHeroNFTs.Hero", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("HeroPropertiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("HeroPropertiesId");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("Core.NFTs.YoHeroNFTs.HeroAttributes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ATT")
                        .HasColumnType("int");

                    b.Property<int>("CRIT")
                        .HasColumnType("int");

                    b.Property<int>("DEX")
                        .HasColumnType("int");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("SPO")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HeroAttributes");
                });

            modelBuilder.Entity("Core.NFTs.YoHeroNFTs.HeroComposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Body")
                        .HasColumnType("int");

                    b.Property<int>("Ears")
                        .HasColumnType("int");

                    b.Property<int>("Eyes")
                        .HasColumnType("int");

                    b.Property<int>("Face")
                        .HasColumnType("int");

                    b.Property<int>("Head")
                        .HasColumnType("int");

                    b.Property<int>("Legs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HeroCompositions");
                });

            modelBuilder.Entity("Core.NFTs.YoHeroNFTs.HeroProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GenesisHero")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HeroAttributesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeroCompositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfSummons")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroAttributesId");

                    b.HasIndex("HeroCompositionId");

                    b.ToTable("HeroProperties");
                });

            modelBuilder.Entity("Core.Auctions.YoHeroLiveAuctions.YoHeroLiveAuction", b =>
                {
                    b.HasOne("Core.NFTs.YoHeroNFTs.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroID");

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("Core.NFTs.YoHeroNFTs.Hero", b =>
                {
                    b.HasOne("Core.NFTs.YoHeroNFTs.HeroProperties", "HeroProperties")
                        .WithMany()
                        .HasForeignKey("HeroPropertiesId");

                    b.Navigation("HeroProperties");
                });

            modelBuilder.Entity("Core.NFTs.YoHeroNFTs.HeroProperties", b =>
                {
                    b.HasOne("Core.NFTs.YoHeroNFTs.HeroAttributes", "HeroAttributes")
                        .WithMany()
                        .HasForeignKey("HeroAttributesId");

                    b.HasOne("Core.NFTs.YoHeroNFTs.HeroComposition", "HeroComposition")
                        .WithMany()
                        .HasForeignKey("HeroCompositionId");

                    b.Navigation("HeroAttributes");

                    b.Navigation("HeroComposition");
                });
#pragma warning restore 612, 618
        }
    }
}
